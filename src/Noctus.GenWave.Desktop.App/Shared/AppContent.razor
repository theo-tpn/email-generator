@using System.Threading
@using Noctus.GenWave.Desktop.App.Managers
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Options
@using Noctus.Domain
@using Noctus.Domain.Entities
@using Stl.Fusion
@inherits Stl.Fusion.Blazor.LiveComponentBase<UserState>

@inject NavigationManager NavigationManager
@inject AuthenticationManager authManager
@inject IOptionsMonitor<UserSettings> UserSettings

@{
    var state = State.LastValue;
    var error = State.Error;
}

@if (!state.IsLogged || error != null)
{
	<MudContainer Class="pa-0" Style="max-width: 100%">
		<MudGrid Spacing="0" Style="margin-top: 30px">
			<MudItem xs="6" Style="height: calc(100vh - 30px)">
				<div style="background-image: url(./img/matrix.svg); background-size: 400px; width: 100%; height: 100%;"></div>
			</MudItem>
			<MudItem xs="6" Class="d-flex flex-column align-center justify-center" Style="height: calc(100vh - 30px)">
				<MudElement HtmlTag="div" Class="mt-auto mb-md-16 my-sm-auto">
					<img src="img/logo.svg" alt="logo" class="login-page-logo" height="150" width="150"/>
					<MudText Typo="Typo.h1" Style="font-family: 'BABAPRO FONT'; text-align: center">Genwave</MudText>
					<MudText Typo="Typo.h2" Style="text-align: center">Welcome back.</MudText>
				</MudElement>
				<MudElement HtmlTag="div" Class="md-16 my-sm-auto mx-auto" Style="width: 50%">
					<EditForm Model="_formModel" OnValidSubmit="Login">
						<MudText GutterBottom="true" Class="d-flex justify-center">
							Enter your license key
						</MudText>

						<MudTextField T="string" @bind-Value="_formModel.LicenseKey" For="() => _formModel.LicenseKey" @ref="_input" Variant="Variant.Outlined" Disabled="_processing" Class="d-flex align-center" Style="max-width: 350px; width: 100%" 
						              AdornmentColor="Color.Primary" Adornment="Adornment.End" AdornmentIcon="@(_processing ? _loader : "")"/>

						<MudElement HtmlTag="div" Class="d-flex justify-center mt-6">
							<MudButton ButtonType="ButtonType.Submit" Disabled="_processing" Class="gradient-button">Enter</MudButton>
						</MudElement>
					</EditForm>
				</MudElement>
				<MudElement HtmlTag="div" Class="my-md-16 my-sm-auto">
					<MudText Typo="Typo.caption" Class="d-flex justify-center">@AppConstants.AppVersion</MudText>
				</MudElement>
			</MudItem>
		</MudGrid>
	</MudContainer>
}
else
{
    <MudDrawer Elevation="0" Open="true" ClipMode="DrawerClipMode.Always">
        <MudNavMenu Class="mr-6 mt-6 flex-grow-1">
            <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Sharp.Dashboard" IconColor="Color.Inherit" Class="my-3 rounded-tr-xl rounded-br-xl mud-drawer-item">
                <MudText Typo="Typo.subtitle1" Class="py-2" Color="Color.Inherit">Dashboard</MudText>
            </MudNavLink>

            <MudNavLink Href="/generator" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Sharp.SupervisedUserCircle" IconColor="Color.Inherit" Class="my-3 rounded-tr-xl rounded-br-xl mud-drawer-item">
                <MudText Typo="Typo.subtitle1" Class="py-2" Color="Color.Inherit">Generator</MudText>
            </MudNavLink>

            <MudNavLink Href="/accounts" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Sharp.People" IconColor="Color.Inherit" Class="my-3 rounded-tr-xl rounded-br-xl mud-drawer-item">
                <MudText Typo="Typo.subtitle1" Class="py-2" Color="Color.Inherit">Accounts</MudText>
            </MudNavLink>

            <MudNavLink Href="/proxies" Match="NavLinkMatch.All" Icon="@Icons.Material.Sharp.Wifi" IconColor="Color.Inherit" Class="my-3 rounded-tr-xl rounded-br-xl mud-drawer-item">
                <MudText Typo="Typo.subtitle1" Class="py-2" Color="Color.Inherit">Proxies</MudText>
            </MudNavLink>

            <MudDivider DividerType="DividerType.Middle" Class="my-6"></MudDivider>

            <MudNavLink Href="/settings" Match="NavLinkMatch.All" Icon="@Icons.Material.Rounded.Settings" IconColor="Color.Inherit" Class="my-3 rounded-tr-xl rounded-br-xl mud-drawer-item">
                <MudText Typo="Typo.subtitle1" Class="py-2" Color="Color.Inherit">Settings</MudText>
            </MudNavLink>
        </MudNavMenu>

        <PerfomanceViewer />

        <MudElement HtmlTag="div" Class="align-self-center mt-16 mb-6">
            <MudText Typo="Typo.caption">@AppConstants.AppVersion</MudText>
        </MudElement>
    </MudDrawer>
    <MudMainContent>
        @BodyContent
    </MudMainContent>
}

@code {
	[Parameter] public RenderFragment? BodyContent { get; set; }

	LoginFormModel _formModel = new();
	MudTextField<string> _input = new();
	bool _processing;

    private string _loader = "<rect x=\"0\" y=\"0\" width=\"4\" height=\"10\" >\r\n<animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"translate\" values=\"0 0; 0 20; 0 0\" begin=\"0\" dur=\"0.6s\" repeatCount=\"indefinite\" /></rect><rect x=\"10\" y=\"0\" width=\"4\" height=\"10\" ><animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"translate\" values=\"0 0; 0 20; 0 0\" begin=\"0.2s\" dur=\"0.6s\" repeatCount=\"indefinite\" /></rect><rect x=\"20\" y=\"0\" width=\"4\" height=\"10\" ><animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"translate\" values=\"0 0; 0 20; 0 0\" begin=\"0.4s\" dur=\"0.6s\" repeatCount=\"indefinite\" /></rect>";

	protected override async Task OnInitializedAsync()
	{
	    _formModel.LicenseKey = UserSettings.CurrentValue.GenwaveKey;

		await State.Update(false);
	}

	private async Task Login()
	{
		_processing = true;

		var result = await authManager.Login(_formModel.LicenseKey, KeyEvent.Login);
		_processing = false;

		if (!result)
		{
			_input.ErrorText = "License key is not valid. Try again or contact an admin.";
			_input.Error = true;
		}
		else
		{
			UserSettings.CurrentValue.GenwaveKey = _formModel.LicenseKey;
			ResourcesHelper.SaveUserSettings(UserSettings.CurrentValue);
		}
	}

	protected override async Task<UserState> ComputeState(CancellationToken cancellationToken)
	{
		return await authManager.GetUserState();
	}

	public class LoginFormModel
	{
		[Required]
		public string LicenseKey { get; set; }
	}
}