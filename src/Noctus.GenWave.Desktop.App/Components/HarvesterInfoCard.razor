@using Noctus.GenWave.Desktop.App.Managers
@using System.Threading

@inherits Stl.Fusion.Blazor.LiveComponentBase<(int availability, bool isDisabled)>
@inject HarvestManager HarvestManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@{
	var state = State.LastValue;
}

<MudCard Elevation="10" Class="px-8" Style="background: var(--card-gradient-4)">
	<MudCardHeader Class="pb-0">
		<CardHeaderContent>
			<MudElement HtmlTag="div" Class="d-flex">
				<MudText Typo="Typo.h4" Class="align-self-center flex-grow-1">Cookies jar</MudText>
				<MudElement HtmlTag="div" Class="align-self-center">
					<MudButton Icon="@Icons.Material.Filled.Handyman" Variant="Variant.Outlined" OnClick="OpenDialog" Color="Color.Default" Size="Size.Small" Disabled="state.isDisabled">Harvest</MudButton>
				</MudElement>
			</MudElement>
		</CardHeaderContent>
	</MudCardHeader>
	<MudCardContent>
		<MudText Typo="Typo.h6">@state.availability available</MudText>
	</MudCardContent>
</MudCard>

@code
{
	protected override async Task<(int, bool)> ComputeState(CancellationToken cancellationToken)
	{
		var availability = await HarvestManager.Availability();
		var isDisabled = await HarvestManager.HarvestingTasksCounter() > 0;

		return (availability, isDisabled);
	}

	private async Task OpenDialog()
	{
		var result = await DialogService.Show<RunHarvesterDialog>("Config Harvester", new DialogOptions
		{
			MaxWidth = MaxWidth.ExtraSmall,
			CloseButton = true
		}).Result;

		if (result.Cancelled)
			return;

		var count = (int)result.Data;
		
		await HarvestManager.Harvest(count).ContinueWith(_ =>
		{
			Snackbar.Add("Cookie harvesting finished", Severity.Info);
		});
	}
}
